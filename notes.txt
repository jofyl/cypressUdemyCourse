Introduction
============

You can force click on elements een if they are hidden behind other popup elements behind.

Handle API validation and check request data being sent.

You can also mock API responses to test edge cases such as the backend being down (4xx, 5xx) which normally can not be tested in real time since they would be flagged as "not right for automation".

npmtrends.com => check usage of Node tools and packages

electron also supported => lighweight version of chromium engine

brew install node

npmjs.com

use npm to manage project dependencies with Package.json

create a project folder
init Package.json => npm -i init

install cypress: npm install cypress --save-dev

to open cypress test runner
./node_modules/.bin/cypress open

clicking on any test in testrunner open runs is

cy => global object to invoke all cypress commands
visit() method => used to navigate to page

cypress bundles electro browser
when running test from the command line, cypress runs in headless mode

when running tests using npm
npm run commandname -- listOfArguments => the "--" are used to pass the arguments through npm

when running tests using cypress directly
cypress run listOfArguments

listOfArguments => when running 1 test (or spec file), use a local pass, starting from the "cypress" folder inside your project

cypress by default, runs in headless mode in electron folder

you can use "/*" to tell cypress to run all the test in a directory

to run in headed mode (i.e browser will open on screen) => --headed
to run in a browser, --browser name => --browser firefox
npm run cy:run -- --spec 'cypress/integration/example/*' --headed --browser firefox

Framework Structure
===================
fixture => used to store data that can be loaded when testing
integration => used to store test suites and test cases
plugins => configs for cypress event listeners, for example, on browser invoke do this, or when test fails, do that
support => write your customized commands or reusable commands, methods... etc, this folder is scanned and imported by default by cypress. in case you define another folder, you will need to import it in you spec files to use it

cypress.json => configuration files for cypress, can be used to override default existing configurations
(durations are in milliseconds)


Cypress supports only CSS selectors
===================================
identified by:
id: #idname
classname: .classname
if there are multiple elements with the same classname, you can use tagname: tagname.classname, can also be used with id: tagname#idname
or as tagname[attribute=value] => the latter can be used to customize with any attribute./no

for example:
<input type="search" placeholder="Search for Vegetables and Fruits" class="search-keyword">
- no id here
- classname: .search-keyword
- input.search-keyword //with tagename
- input[type="search"] //with tagename

=> cypress built-in browser allows you to find elements on the page

Waits
=====
If there is a waiting icon or some kind of clue for cypress to understant that the page is loading, or data is loading, it catches it and it waits, else we will have to provided it with a wait timer

Debug
=====
Easy to debug, can see every step along with screenshots of the page

Practice Pages
==============
https://rahulshettyacademy.com/seleniumPractise/#/
https://www.rahulshettyacademy.com/AutomationPractice/

parent child chaining
=====================
get().find() => search only within the selected elements

Execution
=========
cypress is asynchronous in nature, so there is no guarantee that the steps will execute in sequence, but cypress takes care of it, it has the necessary logic implemented as part od its engine to do this

Promises
========
States: rejection, resolved, pending => the "then()" method is hidden (less noise), taken care of by cypress
thus, cypress commands are really promises

Cypress Commands vs JQuery Methods
==================================
cy.get('.brand').text(): this will not work, text() is not cypress method or command
this comes from JQuery: https://docs.cypress.io/api/table-of-contents
When dealing with methods that are not part of cypress, then the you will have to resolve
the promise manually using .then() since the commands do not resolve the promises by themselves

Another example would be console.log(), since it is JS and not cypress method, if will execute asynchronously, so in order to use it woth cypress
.the(() => {
    console.log('bla');
})

Chrome Security
===============
https://docs.cypress.io/guides/guides/web-security#Disabling-Web-Security
Check the following link in case you encouter cross-origin errors or when dealing with iframes



